import tkinter as tk
from tkinter import messagebox

# Sudoku solver using backtracking
def is_valid(board, row, col, num):
    """Check if placing num in board[row][col] is a valid move."""
    # Check row
    for i in range(9):
        if board[row][i] == num:
            return False
    # Check column
    for i in range(9):
        if board[i][col] == num:
            return False
    # Check 3x3 box
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(start_row, start_row + 3):
        for j in range(start_col, start_col + 3):
            if board[i][j] == num:
                return False
    return True

def solve_sudoku(board):
    """Solve the Sudoku puzzle using backtracking."""
    for row in range(9):
        for col in range(9):
            if board[row][col] == 0:
                for num in range(1, 10):
                    if is_valid(board, row, col, num):
                        board[row][col] = num
                        if solve_sudoku(board):
                            return True
                        board[row][col] = 0
                return False
    return True

def get_board():
    """Retrieve board values from GUI with validation for duplicates."""
    board = []
    for row in range(9):
        current_row = []
        for col in range(9):
            val = entries[row][col].get()
            # Validate input: Check if empty or a valid number
            if val == "":
                current_row.append(0)  # Empty cells are treated as 0
            elif val.isdigit() and 1 <= int(val) <= 9:
                current_row.append(int(val))
            else:
                messagebox.showerror("Invalid Entry", f"Invalid input at row {row + 1}, column {col + 1}. Please enter numbers 1-9.")
                return None  # Invalid input detected
        board.append(current_row)
    
    # Check for duplicate numbers in rows and columns
    for i in range(9):
        row_nums = set()
        col_nums = set()
        for j in range(9):
            # Check row duplicates
            if board[i][j] != 0:
                if board[i][j] in row_nums:
                    messagebox.showerror("Duplicate Entry", f"Duplicate number {board[i][j]} found in row {i + 1}.")
                    return None
                row_nums.add(board[i][j])
            # Check column duplicates
            if board[j][i] != 0:
                if board[j][i] in col_nums:
                    messagebox.showerror("Duplicate Entry", f"Duplicate number {board[j][i]} found in column {i + 1}.")
                    return None
                col_nums.add(board[j][i])
    return board

def display_board(board):
    """Display the solved board in the GUI."""
    for row in range(9):
        for col in range(9):
            entries[row][col].delete(0, tk.END)
            entries[row][col].insert(0, str(board[row][col]))

def solve():
    """Button click handler to solve the puzzle."""
    board = get_board()
    if board is None:
        return  # Stop if there was an invalid entry
    if solve_sudoku(board):
        display_board(board)
    else:
        messagebox.showerror("Error", "No solution exists for this puzzle")

# Initialize the GUI
root = tk.Tk()
root.title("Sudoku Solver")

# Create a grid of Entry widgets
entries = [[None for _ in range(9)] for _ in range(9)]
for row in range(9):
    for col in range(9):
        entry = tk.Entry(root, width=2, font=("Arial", 18), justify="center")
        entry.grid(row=row, column=col, padx=5, pady=5)
        entries[row][col] = entry

# Add a Solve button
solve_button = tk.Button(root, text="Solve", command=solve, font=("Arial", 14))
solve_button.grid(row=9, column=0, columnspan=9, pady=10)

root.mainloop()
